This gives an outline of the support for assembly language on the DAAD
interpreters. Note that the assembler mechanism described is for 8 bit
only. The 16bit interpreters have a LINK mechanism for external code -
but you can still use the compiler directives to provide data in the
database on 16bit.

In order to make things simple you are advised to use the facilities
provided with the compiler, this makes the whole process simple (and
the same) for each machine.

The idea is to include a block of assembly language and call it from
a DAAD program. The only real free memory in the DAAD system is the
area used for the database, so it seems logical to include any assembler
in this section.

The database is fairly simple in layout, it consists of a number of
pointers at address DBADDR - All the symbols given are defined in the
header file SYMBOLS.ASM which must be included in any assembler source.
They are also defined in SYMBOLS.Z80/652 for use with data statements
within a DAAD file - see later.

After these pointers come the data tables generated by the compiler.
The first is the CTL section. Now because this is actually empty and
always at the same address (after the pointers) it is the only really
useful address/place for any non relocatable code. The EXTERN.SCE file
uses this for the interrupt code. the symbol CTLADDR defines the address
of the CTL section. NOTE: All these addresses are different on each machine
for obvious reasons, so you must assemble a copy of the code for each
machine. The examples show how to do this easily with conditional assembly.

If you include machine code anywhere else in the database you will not know
its address until compile time, and as you make changes to the database
its position may change, so you would have to re-assemble and compile again.
Thus the only code you should include elsewhere in the database is relocatable
code/data. Machine code is just a series of numbers like any piece of data
so the next problem is to get your code inserted in the database.

The compiler provides several pre-processor commands to achieve this:-

NOTE: You aren't limited to only assembly language. You can generate new data
tables as well with these commands.

#incbin filespec

Will include a memory image file at the current position in the database

#defb expression {{{expression} expression}...

Will include the indicated byte value(s) in the database at the current
address.

#defw expression {{{expression} expression}...

Will include the indicated word value(s) in the database at the current
address.

#hex hexpair{{whitespace}{hexpair}....}

Will include direct hex data in the db. This is similar to the HEX
statement of PDS.

#dbaddr symbol

Will give symbol the current address in the database. This can be used
for CALL or #defw commands.

The calling mechanism for 8 bit.
--------------------------------

In order to call an assembler routine you have two mechanisms:

1/ SFX,EXTERN

These two commands have an external vector. Which can be set using two
special forms of the #incbin directive:

#extern {filespec}
#sfx {filespec}

If you include the filename then it will cause the given file to be
included in the database (as if the command was followed by #incbin).
The vector in the interpreter is set on database load to the address
of the routine. Note that SFX already has a default effect of writing to
the sound chip registers. So any routine using this vector will replace
this function. The EXTERN.SCE file uses EXTERN to achieve the sound
so that the SFX command continues to function.

Now any EXTERN or SFX commands will be directed to your routine.

The interpreters recognise 3 external vectors. The third is for a 50Hz
interrupt:-

#int {filespec}

Any routine placed on this vector will be called 50 times a second for
the entire period that the game is running. Thus there is no command in
the DAAD language to call the routine. The Z80 ones save only the AF and
HL registers (as HL is given as your address), so be sure to save any
other registers you use. The 6502 interps save the processor state.

2/ CALL address

This is a special CondAct which transfers execution to the given routine.
Although flexible it can't pass any parameters directly. You need to place
data in Flags before the call or use #defb/w after to include static parmeters.
These can be extracted using the BC pointer, leaving it pointing to the
first non parameter byte afterwards.

Address can be any expression which evaluates to a number in the range
0-65535. Note that calling addresses which are not documented routines
or your own subroutines will usually have the effect of crashing the
computer!!

Assembler bit
-------------

1/ Z80

For the SFX and EXTERN CondActs your routine will be supplied with the
following information:-

 A - Value of first parameter (may be indirected, in which case you will
     get the contents of the flag in A.)
HL - Points at the Flag given by the first parameter (or the flag given by
     the contents of the flag if ind
DE - Points at the Object location given by the first parameter
IX - Address of Flag 0, 256 bytes after this are the objects
BC - points at the second parameter of the call, you can advance this pointer
and leave it pointing at the last inline parameter if you wish e.g.

 EXTERN 0 6
#defw Anaddress

Could be accessed with the following routine:-

        LD      A,(BC)
        PUSH    AF
        INC     BC
        LD      A,(BC)
        LD      E,A
        INC     BC
        LD      A,(BC)
        LD      D,A             ; DE = Anaddress
        POP     AF              ; A = 6

The IX and BC registers must be preserved/updated. But the A,DE and HL
registers can be dealt with as you like. Note that you should avoid the
Alternate set and AF' and IY as these are used by the OS of several machines.

After a CALL the A,HL and DE registers are meaningless. And the BC
register already points at the next CondAct or any following data, this is
differenbt to SFX/EXTERN.

Note that on machines where RAM and ROM co-exist your environment will be
64K or RAM, so don't go looking for ROMS without more info...

